Good discussion is here:
http://stackoverflow.com/questions/23353113/django-admin-py-makemessages-not-working


General explanation:

to the top of each html template where you need to use localization tags add this:
    {% load i18n %}

wrap the text which you need to translate like in this example:
        {% trans "Welcome to my project!" %}

    or

        {% blocktrans %}
            "Welcome to my project!"
        {% endblocktrans %}


    Difference between them 2 is described here:
        http://stackoverflow.com/questions/17621770/django-i18n-blocktrans-vs-trans



create folder for localization files ("locale" folder in project dir).
add all the needed settings to settings.py:
    to middleware add:
        'django.middleware.locale.LocaleMiddleware',

    to context_processors:
        for django>1.10:
            'django.template.context_processors.i18n',
        for previous versions:
            'django.core.context_processors.i18n',


    add to the settings file itself:
        LANGUAGES = (
            ('en', _('English')),
            ('ru', _('Russian')),
        )

        LOCALE_PATHS = (
            os.path.join(BASE_DIR, 'locale'),
        )

Changes for urls.py file in a base project folder:

    Add import:
        from django.conf.urls.i18n import i18n_patterns

    change:
        urlpatterns = i18n_patterns(
            some urls here
        )
    to:
        urlpatterns = i18n_patterns(
            some urls here
        )

    now you can add language code before each url to see translated text:
        http://localhost:8000/en/bookings/
    or:
        http://localhost:8000/ru/bookings/

run this code:
python manage.py makemessages -l language_code

for example:
python manage.py makemessages -l ru

it will create the needed folder in "locale" folder for Russian language (locale/ru/LC_MESSAGES)
you will see django.po file in it. There msgid and msgstr strings in it. Put the needed translation to "msgstr" string
for each phrase, which you will see

run afterwards this command:
    python manage.py compilemessages


